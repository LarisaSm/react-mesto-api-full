[{"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/index.js":"1","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/reportWebVitals.js":"2","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/App.js":"3","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Login.js":"4","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/ImagePopup.js":"5","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Confirm.js":"6","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Register.js":"7","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/ProtectedRoute.js":"8","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/InfoTooltip.js":"9","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Main.js":"10","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/PageNotFound.js":"11","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Header.js":"12","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Footer.js":"13","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/EditAvatarPopup.js":"14","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/AddPlacePopup.js":"15","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/EditProfilePopup.js":"16","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/utils/auth.js":"17","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/utils/api.js":"18","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/contexts/CurrentUserContext.js":"19","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/AuthForm.js":"20","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Spinner.js":"21","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/PopupWithForm.js":"22","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Card.js":"23"},{"size":604,"mtime":1617872797599,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1610368114935,"results":"26","hashOfConfig":"25"},{"size":13204,"mtime":1621690688001,"results":"27","hashOfConfig":"25"},{"size":1526,"mtime":1618072798374,"results":"28","hashOfConfig":"25"},{"size":1356,"mtime":1610552154003,"results":"29","hashOfConfig":"25"},{"size":1104,"mtime":1617279826886,"results":"30","hashOfConfig":"25"},{"size":1808,"mtime":1618072798374,"results":"31","hashOfConfig":"25"},{"size":619,"mtime":1617997161635,"results":"32","hashOfConfig":"25"},{"size":1853,"mtime":1618000069235,"results":"33","hashOfConfig":"25"},{"size":1981,"mtime":1621373738391,"results":"34","hashOfConfig":"25"},{"size":638,"mtime":1617992273981,"results":"35","hashOfConfig":"25"},{"size":1174,"mtime":1621363766628,"results":"36","hashOfConfig":"25"},{"size":168,"mtime":1617273902545,"results":"37","hashOfConfig":"25"},{"size":1054,"mtime":1617277008541,"results":"38","hashOfConfig":"25"},{"size":1666,"mtime":1617277511898,"results":"39","hashOfConfig":"25"},{"size":2216,"mtime":1617279853356,"results":"40","hashOfConfig":"25"},{"size":1369,"mtime":1621690533030,"results":"41","hashOfConfig":"25"},{"size":3434,"mtime":1621690533030,"results":"42","hashOfConfig":"25"},{"size":120,"mtime":1616512720965,"results":"43","hashOfConfig":"25"},{"size":482,"mtime":1618002725230,"results":"44","hashOfConfig":"25"},{"size":152,"mtime":1610399790528,"results":"45","hashOfConfig":"25"},{"size":1681,"mtime":1617277032950,"results":"46","hashOfConfig":"25"},{"size":2175,"mtime":1621471519510,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"c5xit9",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/index.js",[],["97","98"],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/reportWebVitals.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/App.js",["99","100","101"],"import React, { useCallback } from \"react\";\nimport ImagePopup from \"./ImagePopup\";\nimport Confirm from \"./Confirm\";\nimport { getInitialCards, addNewCard, editUserInfo, getUserInfo, deleteCard, likeCard, deleteLikeCard,getLikesCard, setUserAvatar } from \"../utils/api\";\nimport Login from \"./Login\";\nimport Register from \"./Register\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport PageNotFound from \"./PageNotFound\";\nimport * as auth from \"../utils/auth\";\nimport InfoTooltip from \"./InfoTooltip\";\n\nimport { Route, Switch, useHistory } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Main from \"./Main\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\n\nimport CurrentUserContext from \"../contexts/CurrentUserContext\";\n\nfunction App() {\n\n  const [isEditProfilePopupOpen, setEditProfilePopupState] = React.useState(\n    false\n  );\n  const [isEditAvatarPopupOpen, setEditAvatarPopupState] = React.useState(\n    false\n  );\n  const [isAddPlacePopupOpen, setAddPlacerPopupState] = React.useState(false);\n  const [isImagePopupOpen, setImagePopupState] = React.useState(false);\n  const [isConfirmOpen, setConfirmOpen] = React.useState(false);\n  const [isInfoTooltipOpen, setInfoTooltipOpen] = React.useState(false);\n  const [isConfirmAuth, setConfirmAuth] = React.useState(false);\n\n  const [cards, setCards] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const [selectedCard, setSelectedCard] = React.useState({\n    src: \"\",\n    nameImg: \"\",\n  });\n  const [isLoadingConfirm, setIsLoadingConfirm] = React.useState(false);\n  const [isLoadingPopup, setIsLoadingPopup] = React.useState(false);\n\n  const [currentUser, setСurrentUser] = React.useState({ name: \"\", about: \"\", email: \"\", token: \"\" });\n  const [currentUserHeaders, setCurrentUserHeaders] = React.useState();\n\n  const [currentCard, setСurrentCard] = React.useState({\n    ownerId: \"\",\n    cardId: \"\",\n  });\n\n  // const [userData, setUserData] = React.useState({});\n\n  const [confirmAction, setConfirmAction] = React.useState({});\n\n  const history = useHistory();\n\n  const [loggedIn, setLoggedIn] = React.useState(false);\n\n\n  // React.useEffect(() => {\n  //   console.log('123123123123');\n  //   tokenCheck();\n  //   console.log()\n  // }, []);\n\n  React.useEffect(() => {\n      getUserInfo(currentUserHeaders)\n      .then((res) => {\n        setСurrentUser(res);\n      })\n      .catch((err) => {\n        console.log(err); // выведем ошибку в консоль\n      });\n  }, [currentUserHeaders]);\n\n  React.useEffect(() => {\n    getInitialCards(currentUserHeaders)\n    .then((res) => {\n      setCards(\n          res.map((item) => ({\n            src: item.link,\n            nameImg: item.name,\n            like: item.likes,\n            cardId: item._id,\n            ownerId: item.owner,\n          }))\n        );\n        setIsLoading(false);\n    })\n    .catch((err) => {\n      console.log(err); // выведем ошибку в консоль\n    });\n}, [currentUserHeaders]);\n\n\n\n  function closeAllPopups() {\n    setEditProfilePopupState(false);\n    setEditAvatarPopupState(false);\n    setAddPlacerPopupState(false);\n    setImagePopupState(false);\n    setInfoTooltipOpen(false);\n    setSelectedCard([]);\n    setIsLoadingPopup(false);\n    setСurrentCard({\n      ownerId: \"\",\n      cardId: \"\",\n    });\n  }\n\n  function handleCardClick({ src, nameImg }) {\n    setSelectedCard({ src, nameImg });\n    setImagePopupState(true);\n  }\n\n  function handleConfirmClick() {\n    setConfirmOpen(true);\n  }\n\n  function handleEditProfileClick(evt) {\n    evt.preventDefault();\n    setEditProfilePopupState(true);\n  }\n\n  function handleEditAvatarClick(e) {\n    e.preventDefault();\n    setEditAvatarPopupState(true);\n  }\n\n  function handleAddPlaceClick(evt) {\n    evt.preventDefault();\n    setAddPlacerPopupState(true);\n  }\n\n  function cardDelete() {\n    const isOwn = currentCard.ownerId === currentUser._id;\n    if (isOwn) {\n        deleteCard(currentCard.cardId, currentUserHeaders)\n        .then(() => {\n          const newCards = cards.filter((c) => c.cardId !== currentCard.cardId);\n          setCards(newCards);\n        })\n        .then(() => {\n          setConfirmOpen(false);\n          setIsLoadingConfirm(false);\n        })\n        .catch((err) => {\n          console.log(err); // выведем ошибку в консоль\n        });\n    }\n  }\n\n  function handleCardDelete(obj) {\n    setConfirmAction(\"cardDelete\");\n    setСurrentCard({\n      ownerId: obj.ownerId,\n      cardId: obj.cardId,\n    });\n  }\n\n  function handleCardLike(like, cardId) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = like.some((i) => i === currentUser._id);\n    // console.log('main -> handleCardLike');\n    if (!isLiked) {\n      // console.log(\"main -> handleCardLike -> like\")\n      likeCard(cardId, currentUserHeaders)\n        .then((newCard) => {\n          const newCards = cards.map((c) =>\n            c.cardId === newCard._id\n              ? {\n                  src: newCard.link,\n                  nameImg: newCard.name,\n                  like: newCard.likes,\n                  cardId: newCard._id,\n                  ownerId: newCard.owner,\n                }\n              : c\n          );\n          setCards(newCards);\n        })\n        .catch((err) => {\n          console.log(err); // выведем ошибку в консоль\n        });\n    } else {\n      // console.log(\"main -> handleCardLike -> deleteLike\")\n      deleteLikeCard(cardId, currentUserHeaders)\n        .then((newCard) => {\n          const newCards = cards.map((c) =>\n            c.cardId === newCard._id\n              ? {\n                  src: newCard.link,\n                  nameImg: newCard.name,\n                  like: newCard.likes,\n                  cardId: newCard._id,\n                  ownerId: newCard.owner,\n                }\n              : c\n          );\n          setCards(newCards);\n        })\n        .catch((err) => {\n          console.log(err); // выведем ошибку в консоль\n        });\n    }\n  }\n\n  function handleUpdateUser(name, about) {\n    setIsLoadingPopup(true);\n    editUserInfo(name, about, currentUserHeaders)\n      .then((res) => setСurrentUser(res))\n      .then(() => {\n        setIsLoadingPopup(false);\n        setEditProfilePopupState(false);\n      })\n      .catch((err) => {\n        console.log(err); // выведем ошибку в консоль\n      });\n  }\n\n  function handleUpdateAvatar(obj) {\n    setIsLoadingPopup(true);\n    setUserAvatar(obj.avatar, currentUserHeaders)\n      .then((res) => setСurrentUser(res))\n      .then(() => {\n        setIsLoadingPopup(false);\n        setEditAvatarPopupState(false);\n      })\n      .catch((err) => {\n        console.log(err); // выведем ошибку в консоль\n      });\n  }\n\n  function handleAddPlaceSubmit(obj) {\n    setIsLoadingPopup(true);\n    addNewCard(obj.name, obj.link, currentUserHeaders)\n      .then((newCard) => {\n        newCard.key = newCard._id;\n        newCard.like = newCard.likes;\n        newCard.ownerId = newCard.owner;\n        newCard.src = newCard.link;\n        newCard.nameImg = newCard.name;\n        newCard.cardId = newCard._id;\n        setCards([newCard, ...cards]);\n      })\n      .then(() => {\n        setIsLoadingPopup(false);\n        setAddPlacerPopupState(false);\n      })\n      .catch((err) => {\n        console.log(err); // выведем ошибку в консоль\n      });\n  }\n\n  function handleLogin(inputEmailValue, inputPassValue) {\n    auth\n      .authorize(inputPassValue, inputEmailValue)\n      .then((data) => {\n        if (data.token) {\n          setLoggedIn(true);\n          // setUserData({ email: inputEmailValue });\n          setСurrentUser({ email: inputEmailValue });\n          setCurrentUserHeaders(data.token);\n          history.push(\"/\");\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  function handleRegister(inputPassValue, inputEmailValue) {\n    auth\n      .register(inputPassValue, inputEmailValue)\n      .then((data) => {\n        if (data._id) {\n          setConfirmAuth(true);\n          history.push(\"/sign-in\");\n        }\n        setInfoTooltipOpen(true);\n      })\n      .catch((err) => {\n        console.log(err);\n        setConfirmAuth(false);\n        setInfoTooltipOpen(true);\n      });\n  }\n\n  function signOut() {\n    localStorage.removeItem(\"jwt\");\n    history.push(\"/sign-in\");\n  }\n\n  function tokenCheck () {\n    // если у пользователя есть токен в localStorage,\n    // эта функция проверит валидность токена\n    const jwt = localStorage.getItem(\"jwt\");\n    if (jwt) {\n      // проверим токен\n      auth\n        .getContent(jwt)\n        .then((res) => {\n          if (res) {\n            // авторизуем пользователя\n            setLoggedIn(true);\n            // setUserData({ email: res.data.email });\n            setСurrentUser({ email: res.email });\n            setCurrentUserHeaders(jwt);\n\n            // обернём App.js в withRouter\n            // так, что теперь есть доступ к этому методу\n            history.push(\"/\");\n          }\n        })\n        .catch((err) => {\n          console.log(err); // выведем ошибку в консоль\n        });\n    }\n  }\n\n  React.useEffect(() => {\n    setIsLoading(true);\n    tokenCheck();\n    getInitialCards(currentUserHeaders)\n      .then((res) => {\n        setCards(\n          res.map((item) => ({\n            src: item.link,\n            nameImg: item.name,\n            like: item.likes,\n            cardId: item._id,\n            ownerId: item.owner,\n          }))\n        );\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        console.log(err); // выведем ошибку в консоль\n      });\n  }, []);\n\n  React.useEffect(() => {\n\n    getUserInfo(currentUserHeaders)\n    .then((res) => {\n      setСurrentUser(res);\n    })\n    .catch((err) => {\n      console.log(err); // выведем ошибку в консоль\n    });\n}, [currentUserHeaders]);\n\nReact.useEffect(() => {\n\n  getInitialCards(currentUserHeaders)\n  .then((res) => {\n    setCards(\n        res.map((item) => ({\n          src: item.link,\n          nameImg: item.name,\n          like: item.likes,\n          cardId: item._id,\n          ownerId: item.owner,\n        }))\n      );\n      setIsLoading(false);\n  })\n  .catch((err) => {\n    console.log(err); // выведем ошибку в консоль\n  });\n}, [currentUserHeaders]);\n\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"App\">\n        <Header loggedIn={loggedIn} userData={currentUser} signOut={signOut} />\n        <Switch>\n          <ProtectedRoute\n            exact\n            path=\"/\"\n            component={Main}\n            loggedIn={loggedIn}\n            cards={cards}\n            onEditProfile={(e) => handleEditProfileClick(e)}\n            onEditAvatar={(e) => handleEditAvatarClick(e)}\n            onAddPlace={(e) => handleAddPlaceClick(e)}\n            onCardClick={handleCardClick}\n            setConfirmOpen={handleConfirmClick}\n            onCardLike={handleCardLike}\n            onCardDelete={handleCardDelete}\n            isLoading={isLoading}\n          />\n          <Route path=\"/sign-in\">\n            <Login onLogin={handleLogin} />\n          </Route>\n          <Route path=\"/sign-up\">\n            <Register onRegister={handleRegister} />\n          </Route>\n          {/* <Route>\n            {loggedIn ? <Redirect to=\"/\" /> : <Redirect to=\"/sign-in\" />}\n          </Route> */}\n          <Route path=\"*\">\n            <PageNotFound />\n          </Route>\n        </Switch>\n\n        <Footer />\n\n        <EditProfilePopup\n          isOpen={isEditProfilePopupOpen}\n          onClose={closeAllPopups}\n          onUpdateUser={handleUpdateUser}\n          isLoadingPopup={isLoadingPopup}\n        ></EditProfilePopup>\n        <EditAvatarPopup\n          isOpen={isEditAvatarPopupOpen}\n          onClose={closeAllPopups}\n          onUpdateAvatar={handleUpdateAvatar}\n          isLoadingPopup={isLoadingPopup}\n        ></EditAvatarPopup>\n        <AddPlacePopup\n          isOpen={isAddPlacePopupOpen}\n          onClose={closeAllPopups}\n          onAddPlace={handleAddPlaceSubmit}\n          isLoadingPopup={isLoadingPopup}\n        ></AddPlacePopup>\n\n        <Confirm\n          isOpen={isConfirmOpen}\n          setIsOpen={setConfirmOpen}\n          confirmAction={confirmAction}\n          setСurrentUser={setСurrentUser}\n          isLoadingConfirm={isLoadingConfirm}\n          setIsLoadingConfirm={setIsLoadingConfirm}\n          cardDelete={cardDelete}\n        />\n        <ImagePopup\n          card={selectedCard}\n          isOpen={isImagePopupOpen}\n          onClose={closeAllPopups}\n        />\n        <InfoTooltip\n          isOpen={isInfoTooltipOpen}\n          onClose={closeAllPopups}\n          isConfirmAuth={isConfirmAuth}\n        />\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n","/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Login.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/ImagePopup.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Confirm.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Register.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/ProtectedRoute.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/InfoTooltip.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Main.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/PageNotFound.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Header.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Footer.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/EditAvatarPopup.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/AddPlacePopup.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/EditProfilePopup.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/utils/auth.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/utils/api.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/contexts/CurrentUserContext.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/AuthForm.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Spinner.js",[],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/PopupWithForm.js",[],["102","103"],"/Users/lara/Documents/обучение/программирование/yaPractik/react-mesto-api-full/react-mesto-api-full/frontend/src/components/Card.js",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":1,"column":17,"nodeType":"110","messageId":"111","endLine":1,"endColumn":28},{"ruleId":"108","severity":1,"message":"112","line":4,"column":103,"nodeType":"110","messageId":"111","endLine":4,"endColumn":115},{"ruleId":"113","severity":1,"message":"114","line":342,"column":6,"nodeType":"115","endLine":342,"endColumn":8,"suggestions":"116"},{"ruleId":"104","replacedBy":"117"},{"ruleId":"106","replacedBy":"118"},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'getLikesCard' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'currentUserHeaders' and 'tokenCheck'. Either include them or remove the dependency array.","ArrayExpression",["121"],["119"],["120"],"no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},"Update the dependencies array to be: [currentUserHeaders, tokenCheck]",{"range":"124","text":"125"},[9622,9624],"[currentUserHeaders, tokenCheck]"]